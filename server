#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <me@msfjarvis.dev>
# SPDX-License-Identifier: MIT

function backup() {
  local DIR
  DIR="${1}"
  DL_UPLOAD_HOST=msfjarvis@backup DL_UPLOAD_PATH=~/ LOCAL_SITE_MIRROR=$(pwd) syncup "${DIR:?}"
}

function syncdown() {
  [ -z "${LOCAL_SITE_MIRROR}" ] && {
    echo 'LOCAL_SITE_MIRROR not set!'
    return 1
  }
  local LOCAL_DIR REMOTE_DIR
  declare -a CUSTOM_DIRS=()
  declare -a CONFIGURATION=("-ahv" "--progress" "--delete" "--no-o" "--no-g")
  LOCAL_DIR="${LOCAL_SITE_MIRROR}"
  REMOTE_DIR="${DL_UPLOAD_PATH}"
  for arg; do
    if [ "${arg}" == "--dry-run" ]; then
      CONFIGURATION+=("--dry-run")
    elif [ "${arg}" == "--itemize" ]; then
      CONFIGURATION+=("--itemize-changes")
    else
      local CUSTOM_DIR
      CUSTOM_DIR="$(basename "${arg}")"
      if [ "${CUSTOM_DIR}" == "." ]; then
        CUSTOM_DIR="$(basename "$(pwd)")"
      fi
      [ -d "${LOCAL_SITE_MIRROR}/${CUSTOM_DIR}" ] && CUSTOM_DIRS+=("${CUSTOM_DIR}")
    fi
  done
  if [ "${#CUSTOM_DIRS[@]}" -eq 0 ]; then
    rsync "${CONFIGURATION[@]}" "${DL_UPLOAD_HOST}:${REMOTE_DIR}/" "${LOCAL_DIR}"
  else
    for dir in "${CUSTOM_DIRS[@]}"; do
      local NEW_LOCAL_DIR NEW_REMOTE_DIR
      NEW_LOCAL_DIR="${LOCAL_DIR}/${dir}"
      NEW_REMOTE_DIR="${REMOTE_DIR}${dir}"
      rsync "${CONFIGURATION[@]}" "${DL_UPLOAD_HOST}:${NEW_REMOTE_DIR}/" "${NEW_LOCAL_DIR}"
    done
  fi
}

function syncup() {
  [ -z "${LOCAL_SITE_MIRROR}" ] && {
    echo 'LOCAL_SITE_MIRROR not set!'
    return 1
  }
  local LOCAL_DIR REMOTE_DIR
  declare -a CUSTOM_DIRS=()
  declare -a CONFIGURATION=("-ahv" "--progress" "--delete" "--no-o" "--no-g")
  LOCAL_DIR="${LOCAL_SITE_MIRROR}"
  REMOTE_DIR="${DL_UPLOAD_PATH}"
  for arg; do
    if [ "${arg}" == "--dry-run" ]; then
      CONFIGURATION+=("--dry-run")
    elif [ "${arg}" == "--itemize" ]; then
      CONFIGURATION+=("--itemize-changes")
    else
      local CUSTOM_DIR
      CUSTOM_DIR="$(basename "${arg}")"
      if [ "${CUSTOM_DIR}" == "." ]; then
        CUSTOM_DIR="$(basename "$(pwd)")"
      fi
      [ -d "${LOCAL_SITE_MIRROR}/${CUSTOM_DIR}" ] && CUSTOM_DIRS+=("${CUSTOM_DIR}")
    fi
  done
  if [ "${#CUSTOM_DIRS[@]}" -eq 0 ]; then
    rsync "${CONFIGURATION[@]}" "${LOCAL_DIR}/" "${DL_UPLOAD_HOST}:${REMOTE_DIR}"
  else
    for dir in "${CUSTOM_DIRS[@]}"; do
      local NEW_LOCAL_DIR NEW_REMOTE_DIR
      NEW_LOCAL_DIR="${LOCAL_DIR}/${dir}"
      NEW_REMOTE_DIR="${REMOTE_DIR}${dir}"
      rsync "${CONFIGURATION[@]}" "${NEW_LOCAL_DIR}/" "${DL_UPLOAD_HOST}:${NEW_REMOTE_DIR}"
    done
  fi
}

# Publish a file to the download server
function publish() {
  local FILE REMOTE_DIR
  FILE="${1}"
  REMOTE_DIR="${2:-share}"
  [ ! -f "${FILE}" ] && {
    reportWarning "'${1}' does not exist!"
    return
  }
  mkdir -p "${LOCAL_SITE_MIRROR}/${REMOTE_DIR}"
  cp "${FILE:?}" "${LOCAL_SITE_MIRROR}/${REMOTE_DIR}/"
  syncup "${REMOTE_DIR}"
  printf "https://dl.msfjarvis.dev/%s" "${REMOTE_DIR}/$(basename "${FILE:?}")" | xclip -rmlastnl -selection clipboard
}
