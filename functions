#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Prints a formatted header; used for outlining
function echoText() {
    RED="\033[01;31m"
    RST="\033[0m"
    echo -e "${RED}"
# shellcheck disable=SC2034
    echo -e "====$( for i in $(seq ${#1}); do echo -e "=\c"; done )===="
    echo -e "==  ${1}  =="
# shellcheck disable=SC2034
    echo -e "====$( for i in $(seq ${#1}); do echo -e "=\c"; done )===="
    echo -e "${RST}"
}

# Source common functions
SCRIPT_DIR="$(cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd)"
source "${SCRIPT_DIR}"/common
source "${SCRIPT_DIR}"/gitshit
source "${SCRIPT_DIR}"/apps
source "${SCRIPT_DIR}"/aliases

function setemail {
    [ ! -d .git ] && { reportWarning "This command needs to run in a git tree"; return 1; }
    local EMAIL GPG_KEY
    case "${1:?}" in
    "work"|"prjkt") EMAIL="harsh@prjkt.io"; GPG_KEY="4AD75758D9EE741C" ;;
    esac
    if [ -z "${EMAIL}" ] && [ -z "${GPG_KEY}" ]; then { git config --unset user.email; git config --unset user.signingkey; return 0; }; fi
    git config user.email "${EMAIL}"
    git config user.signingkey "${GPG_KEY}"
}

# shellcheck disable=SC2009
# Consider using pgrep instead of grepping ps output.
# We're directly grepping ps output to handle cases like android-studio, where
# a new java process is forked off after the execution of the initial shell script
# and this the 'pgrep studio' command does not return all the processes.
function endtask {
    for pid in $(ps -ef | grep "${1:?}" | awk '{print $2}'); do kill -9 "${pid}" 2>/dev/null; done
}

function imgur {
    local FILE; FILE="${1}"
    curl --request POST --url https://api.imgur.com/3/image --header "authorization: Client-ID ${IMGUR_API_KEY}" \
        --header 'content-type: multipart/form-data;' -F "image=@${FILE:?}" 2>/dev/null \
        | jq .data.link | sed 's/"//g' | xclip -rmlastnl -selection clipboard
}

function gdrivedl {
    local URL GDRIVE FILE_ID; URL="${1}"
    GDRIVE="$(command -v gdrive)"
    if [ -z "${GDRIVE}" ]; then
        reportWarning "gdrive is not in \$PATH"
        return 1
    fi
    if [[ "${URL:?}" =~ folders ]]; then
        FILE_ID="$(echo "${URL}" | sed -r 's/https.*folders\/(.*)/\1/')"
    else
        FILE_ID="$(echo "${URL:?}" | sed -r 's/(.*)&export.*/\1/' | sed -r 's/https.*id=(.*)/\1/')"
    fi
    gdrive download --recursive "${FILE_ID:?}"
}

function publish {
    local FILE REMOTE_DIR FULL_REMOTE_DIR
    FILE="${1}"
    REMOTE_DIR="${2:-.superhidden}"
    FULL_REMOTE_DIR="${CAESIUM_UPLOAD_PATH/caesium/${REMOTE_DIR}}/"
    # shellcheck disable=SC2029
    # I want this to expand on the client side
    ssh "${CAESIUM_UPLOAD_HOST}" mkdir -p "${FULL_REMOTE_DIR}"
    rsync -a "${FILE:?}" "${CAESIUM_UPLOAD_HOST}:${FULL_REMOTE_DIR}" --progress
    printf "https://download.msfjarvis.website/%s" "${REMOTE_DIR}/$(basename "${FILE:?}")" | xclip -rmlastnl -selection clipboard
}

function reload {
    source ~/.bashrc
}

function lolsay {
    cowsay "${@}" | lolcat
}

function foreversay {
    until ! lolsay "${@}"; do sleep 0; done
}

function tgcow {
    local CHAT_ID="${1}"
    [ -z "${CHAT_ID}" ] && CHAT_ID="${OP3_CAESIUM_CHAT_ID}"
    tgm "\`$(cowsay "${@}")\`" "${CHAT_ID}"
}

function tgpaste {
    local MESSAGE LINK
    [ -f "${1:?}" ] || return
    LINK=$(hastebin "${1}" "no")
    MESSAGE="[$(basename "${1}")](${LINK})"
    tgm "${MESSAGE}"
}

function cpuinfo {
    grep -E '^model name|^cpu MHz' /proc/cpuinfo
}

function encrypt {
    [ -z "${1}" ] && return
    gpg --encrypt --output "${1}".gpg --recipient "msfjarvis@gmail.com" "${1}"
}

function maintenance {
    sudo apt update
    sudo apt upgrade -y
    sudo apt autoremove -y
}

function battinfo {
    local BASE=/sys/class/power_supply/BAT0/
    declare -a ITEMS=("capacity_level:Battery_status" "charge_now:Current_charge" "capacity:Battery_percentage" "status:Status")
    for ITEM in "${ITEMS[@]}"; do
        NODE=$(echo "${ITEM}" | cut -d ':' -f 1)
        LABEL=$(echo "${ITEM}" | cut -d ':' -f 2)
        echo -e "${CL_RED}${LABEL/_/ }${CL_RST}: ${CL_YLW}$(cat "${BASE}${NODE}")${CL_RST}"
    done
}

# Server tooling
function serverconnect {
    ssh horbis@aosiprom.com
}

function link {
    local SRC DEST PWD; SRC="${1}"; DEST="${2}"
    PWD="$(pwd)"
    case "${SRC:?}" in
        /*) ;; # No action needed
        *) SRC="${PWD}"/"${SRC:?}" ;;
    esac
    ln -sf "${SRC:?}" "${DEST:?}"
}

function hostupdate {
    local dir
    dir="$(pwd)"
    cd ~/git-repos/hosts || return 1
    python3 msfUpdateHostsFile.py
    rsync -avR hosts_msf "$CAESIUM_UPLOAD_HOST:${CAESIUM_UPLOAD_PATH/caesium/adblock}"/hosts
    cd "${dir}" || return 1
}

function backup {
    adb-sync --reverse /sdcard/* ~/git-repos/backups/
}

function cloc {
    find "${1:-.}" -type f -print0 | xargs -0 wc -l
}

# Random utility tooling
function weather {
    if [ "$(tput cols)" -lt 125 ]; then # 125 is min size for correct display
        curl "wttr.in/~${1:-Ghaziabad}?0"
    else
        curl "wttr.in/~${1:-Ghaziabad}"
    fi
}

function reboot {
  echo "Do you really wanna reboot??"
  read -r confirmation
  case "${confirmation}" in
      'y'|'Y'|'yes') exec "$(command -v reboot)" ;;
      *) ;;
  esac
}

function tab2space() {
  find . -type f -exec bash -c 'expand -t 4 "$0" > /tmp/e && mv /tmp/e "$0"' {} \;
}

function d2u() {
  find . -type f -not -iwholename '.git' -exec dos2unix {} \;
}

function whitespace() {
  find . -type f -not -iwholename '.git' -print0 | xargs -0 perl -pi -e 's/ +$//'
}

# Kernel stuff
function kgrep {
    find "${2:-.}" -name .git -prune -o -path ./out -prune -o -regextype posix-egrep \
        -iregex '(.*\/Makefile|.*\/Kconfig|.*\/oneplus3_defconfig|.*\/caesium_defconfig|.*\/wahoo_defconfig)' -type f \
        -exec grep --color -n "$1" {} +
}

function apply_patches {
    local KERN_VER; KERN_VER="3.18"
    [ -z "${1}" ] || KERN_VER="${1}"
    local PATCH_DIR="../stable-queue/queue-${KERN_VER}"
    [ ! -d "${PATCH_DIR}" ] && echo "No patches in queue" && return
    grep -v '^ *#' < "${PATCH_DIR}/series" | while IFS= read -r patch
    do
        until git am "${PATCH_DIR}"/"${patch}"; do reportError "Patch ${patch} failed to apply"; done
    done
}

function rebuildtc {
    cd "${HOME}"/git-repos/build-tools-gcc || exit 1
    echoText "Building ARM GCC 7.x"
    ./build -a arm -s gnu -v 7 -V -f
    if [ -d arm-linux-gnueabi ]; then
        rsync -av arm-linux-gnueabi/ "${HOME}"/git-repos/halogenOS/toolchains/arm-linux-gnueabi
    else
        reportError "ARM GCC 7.x failed to compile"
    fi
    echoText "Building ARM GCC 8.x"
    ./build -a arm -s gnu -v 8 -V -f
    if [ -d arm-linux-gnueabi ]; then
        rsync -av arm-linux-gnueabi/ "${HOME}"/git-repos/halogenOS/toolchains/arm-linux-gnueabi-8.x
    else
        reportError "ARM GCC 8.x failed to compile"
    fi
    echoText "Building ARM64 GCC 7.x"
    ./build -a arm64 -s gnu -v 7 -V -f
    if [ -d aarch64-linux-gnu ]; then
        rsync -av aarch64-linux-gnu/ "${HOME}"/git-repos/halogenOS/toolchains/aarch64-linux-gnu
    else
        reportError "ARM64 GCC 7.x failed to compile"
    fi
    echoText "Building ARM64 GCC 8.x"
    ./build -a arm64 -s gnu -v 8 -V -f
    if [ -d aarch64-linux-gnu ]; then
        rsync -av aarch64-linux-gnu/ "${HOME}"/git-repos/halogenOS/toolchains/aarch64-linux-gnu-8.x
    else
        reportError "ARM64 GCC 8.x failed to compile"
    fi
}

function fillccache {
    local START_TIME END_TIME BASE_DIR CUR_DIR; START_TIME=$(date +"%s")
    declare -a DEVICES=("oneplus3" "wahoo")
    BASE_DIR=/home/msfjarvis/git-repos/halogenOS
    CUR_DIR="$(pwd)"
    for DEVICE in "${DEVICES[@]}"; do
        for COUNT in {1..10}; do
            echoText "Build ${COUNT} for device ${DEVICE}"
            cd "${BASE_DIR}"/"${DEVICE}" || return 1
            build-caesium -c
        done
    done
    cd "${CUR_DIR}" || return 1
    END_TIME="$(date +"%s")"
    DIFF="$(bc <<< "${END_TIME} - ${START_TIME}")"
    echoText "Total time elapsed: $(bc <<< "${DIFF} / 60") minute(s) and $(bc <<< "${DIFF} % 60") seconds."
}

function gettcvers {
    cd "${HOME}"/git-repos/halogenOS/toolchains || return 1
    for item in arm-linux-gnueabi arm-linux-gnueabi-8.x aarch64-linux-gnu aarch64-linux-gnu-8.x; do
        ./"$item"/bin/"${item/-8.x/}"-gcc --version
    done
    cd - > /dev/null || return 1
}

function stableprep {
    local JOBS
    JOBS="-j$(nproc --all)"
    ARCH=x86_64 make x86_64_defconfig "${JOBS}"
    make prepare "${JOBS}"
    make allyesconfig
    find "${1:?}" -name "*.o" -exec rm -v {} \;
}

function findJ {
    ag -ia "${1}" | grep java | cut -f 1 -d ':' | uniq
}

function fao {
    if [ -z "${1}" ]; then
        echoText "Supply a filename moron"
        return
    else
        local SEARCH_DIR
        SEARCH_DIR="."
        [ -z "${2}" ] || SEARCH_DIR="${2}"
        nano -L "$(find "${SEARCH_DIR}" -name "${1}.*")"
    fi
}
